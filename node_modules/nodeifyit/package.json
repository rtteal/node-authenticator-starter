{
  "name": "nodeifyit",
  "version": "1.0.1",
  "description": "Convert an async or promise returning function to a callback accepting function",
  "homepage": "http://github.com/CrabDude/nodeifyit",
  "repository": {
    "type": "git",
    "url": "git://github.com/CrabDude/nodeifyit.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": {
    "name": "Adam Crabtree"
  },
  "keywords": [
    "promise",
    "callback",
    "nodeify",
    "async"
  ],
  "license": "MIT",
  "dependencies": {
    "bluebird-nodeify": "^1.0.0"
  },
  "readme": "# nodeifyit\nConvert an async or promise returning function to a callback accepting function:\n\n#### Use async or promise returning functions:\n```node\npassport.use(new LocalStrategy(nodeifyit(async (username, password) => {\n    if (/* Failure condition */) {\n        return [false, {message: 'Invalid username'}]\n    }\n    return user\n}, {spread: true})))\n```\n#### Where callbacks would normally be required:\n```node\npassport.use(new LocalStrategy((username, password next) => {\n    let promise = async()=>{\n        if (/* Failure condition */) {\n            next(null [false, {message: 'Invalid username'}]\n        }\n        return user\n   }()\n   nodeify(promise, callback)\n}, {spread: true})))\n```\n\n## Options\n\n#### spread\n\nSee `bluebird`'s `.nodeify()` docs.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/CrabDude/nodeifyit/issues"
  },
  "_id": "nodeifyit@1.0.1",
  "_from": "nodeifyit@"
}
